- Remember, you can search and find files using your tools.
- When asked to make a change, try understand what the user needs. If they ask you to search, use the tools. If you need to understand the structure, look at the file structure.md to understand where you need to make changes. If need be, search up the relevant file for context. Try to find and use common components if they exist.
- When the user asks to push to github, run "git diff | cat" to figure out what was changed - update structure.md, see below - and then make a one command like "git add . && git commit -m "{include specific commit message feat/ a summary/explanation of the changes}" && git push". Start this process if appropriate with the user if you think they'll be done with a task.
- As per the above, you're pushing to Github - If there are structural changes - files add, deleted, or purposes of files changed - you should then update the appropriate place in structure.md.
- Recognize when logic should be server-side in Supabase: Operations involving atomic database transactions (like linking related records on creation), needing elevated privileges, requiring sensitive keys, needing guaranteed execution regardless of client state, or directly triggered by database events (inserts/updates/deletes) are often best handled using Supabase Database Functions/Triggers or Edge Functions instead of client-side code.
- When the developer asks you to create logs to debug something, give them and all the logs that may be useful to you in uneathing an issue, a unique tag like [VideoLoadSpeedIssue]. Try to understand what additional logs could be useful to add.
- When they tell you to look at @structure.md, go through it in detail to understsand how it might apply to the task.
- Remember: you can run commands like "git diff | cat" in her environment.
- After each change, review what you've done and how it relates to the task, and ask yourself "Did I unintentionally delete or edit something out of scope?"